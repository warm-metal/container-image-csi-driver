name: cri-o-15mins
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Start a kind cluster with crio
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: kind-${{ github.run_id }}
          kubectl_version: "v1.25.2"
          node_image: "docker.io/warmmetal/kindest-node-crio:v1.25.2-csi-driver-image"
      - name: Install private registry
        run: ./hack/ci/setup_private_registry.sh
      - name: Build image
        run: ./hack/ci/build.sh
      - name: Set image version
        run: |
          echo "VALUE_FILE=charts/warm-metal-csi-driver/values-crio.yaml" >> "$GITHUB_ENV"
          echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          echo "HELM_NAME=wm-csi-integration-tests" >> "$GITHUB_ENV"
      - name: Install the CSI Driver
        run: |
          trap "kubectl -n kube-system describe po" ERR
          helm install ${HELM_NAME} charts/warm-metal-csi-driver -n kube-system \
            -f ${VALUE_FILE} \
            --set csiPlugin.image.tag=${IMAGE_TAG} \
            --wait \
            --debug
      - name: Run integration Tests
        run: ./hack/ci/test.sh
      - name: Uninstall the CSI Driver
        run: helm uninstall -n kube-system ${HELM_NAME} --wait
      - name: Install the CSI Driver (for `--max-in-flight-pulls`)
        run: |
          helm install ${HELM_NAME} charts/warm-metal-csi-driver -n kube-system \
            -f ${VALUE_FILE} \
            --set csiPlugin.image.tag=${IMAGE_TAG} \
            --set csiPlugin.maxInFlightPulls=1 \
            --set csiPlugin.asyncPullTimeout=1ms \
            --set csiPlugin.enableAsyncPullMount=true \
            --wait \
            --debug
      - name: debug using ssh
        uses: lhotari/action-upterm@v1
      - name: Run Tests
        run: test/integration/test-max-in-flight-pulls.sh
      - name: Uninstall the CSI Driver (for `--max-in-flight-pulls`)
        run: helm uninstall -n kube-system ${HELM_NAME} --wait